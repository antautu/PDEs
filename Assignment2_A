import math
import numpy as np
import matplotlib.pyplot as plt
import scipy
import scipy.special

#Specify Parameters.
a = 2.0
b = 3.0
alpha = 0.5

zeros = 100
c0 = ((b*a)/4.0)
h = (2*alpha*b)/a

r0 = 0.0
r_end = a
deltar =.002
r_steps = int((r_end-r0)/deltar) + 1

t0 = 0.0
t_end = 1.2
deltat = .001
t_steps = int((t_end-t0)/deltat) + 1


#Set up arrays.

t = [0]*t_steps
r = [0]*r_steps
u_ana = [0]*r_steps
Psi = [0]*zeros

RHS = np.zeros([r_steps,1])
A = np.identity(r_steps)
u_BD2 = np.zeros([r_steps,t_steps])
Psi = scipy.special.jn_zeros(1,zeros)

#Specify the initial conditions.

r[0] = r0
t[0] = t0

for i in range(0,r_steps-1):
    r[i+1] = r[i] + deltar
for i in range(0,t_steps-1):
    t[i+1] = t[i] + deltat
for i in range(0, r_steps-1):
    u_BD2[i,0] = 0
 
    #########################################
    ##### Sets up the governing matrix ######
    #########################################
A[0,0] = -3.0/2.0
A[0,1] = 2.0
A[0,2] = -1.0/2.0
A[r_steps-1,r_steps-3] = 1.0/2.0
A[r_steps-1,r_steps-2] = -2.0
A[r_steps-1,r_steps-1] = 3.0/2.0  



for i in range(1,r_steps-1):
    # Fills the main diagonal
        A[i,i] = 1.0 + (4.0/3.0)*(alpha*deltat)/deltar**2
    # Fills the sub-diagonal
        if (i>0):
            A[i,i-1] = (1.0/3.0)*alpha*deltat/(deltar*r[i]) - (2.0/3.0)*alpha*deltat/deltar**2
    # Fills the super-diagonal
        if (i<r_steps-1):
            A[i,i+1]= -(1.0/3.0)*alpha*deltat/(deltar*r[i]) - (2.0/3.0)*alpha*deltat/deltar**2

    #########################################
    ####### Sets up the forcing RHS #########
    #########################################
    
for i in range(1, r_steps-1):
    u_BD2[i,0]+(alpha*deltat)*(((u_BD2[i+1,0]-2.0*u_BD2[i,0]+u_BD2[i-1,0])/deltar**2) + ((u_BD2[i+1,0]-u_BD2[i-1,0])/(deltar*2.0*r[i])))

u_BD2[0,1] = u_BD2[1,1] 
u_BD2[r_steps-1,1] = u_BD2[r_steps-2,1] + b*deltar
        
for j in range(1,t_steps-1):
    
    RHS[0] = 0.0
    RHS[r_steps-1] = b*deltar 

    for i in range(1,r_steps-1):
        RHS[i] = (4.0/3.0)*u_BD2[i,j] - (1.0/3.0)*u_BD2[i,j-1]

    # Solves the system A*y=RHS for y
    u_BD2[:,range(j+1,j+2)]= np.linalg.solve(A,RHS)

    ##########################################
    ####### Set up Analytical Solution #######
    ##########################################
def ana(rf, tf):
    summation = 0
    
    for m in range (0,zeros):
        c = ((2.0*b*a)/(Psi[m]**2))*(scipy.special.jv(2,Psi[m])/(scipy.special.jv(0,Psi[m])**2))
        summation += c*math.exp(-alpha*(Psi[m]**2/(a**2))*tf)*scipy.special.jv(0,Psi[m]*rf/a)
    
    return  ((b/(2.0*a))*rf**2) + h*tf  - c0 + summation


for i in range(0,r_steps):
    u_ana[i] = ana(r[i],t[t_steps-1])

    
   ################################################
   ################  Set up graph  ################
   ################################################
plt.plot(r,u_BD2[:,t_steps-1],linewidth = 3,color = 'blue')
plt.plot(r,u_ana,linewidth = 3,color = 'red')    
#plt.plot(r,abs(u_ana - u_BD2[:,t_steps-1]),linewidth = 3,color = 'green')
plt.show()
